import java.awt.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;

public class StudentGradeTrackerApp {
    static class Student {
        String name;
        ArrayList<Float> grades;

        Student(String name) {
            this.name = name;
            this.grades = new ArrayList<>();
        }

        void addGrade(float grade) {
            grades.add(grade);
        }

        float average() {
            if (grades.isEmpty()) return 0;
            float sum = 0;
            for (float g : grades) sum += g;
            return sum / grades.size();
        }

        float highest() {
            if (grades.isEmpty()) return 0;
            float max = Float.MIN_VALUE;
            for (float g : grades) max = Math.max(max, g);
            return max;
        }

        float lowest() {
            if (grades.isEmpty()) return 0;
            float min = Float.MAX_VALUE;
            for (float g : grades) min = Math.min(min, g);
            return min;
        }

        @Override
        public String toString() {
            return name;
        }
    }

    private final JFrame frame;
    private final JTextField nameField, gradeField;
    private final JButton addStudentBtn, addGradeBtn, reportBtn;
    private final JComboBox<Student> studentDropdown;
    private final ArrayList<Student> students = new ArrayList<>();

    public StudentGradeTrackerApp() {
        frame = new JFrame("ðŸŽ“ Student Grade Tracker");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(600, 400);
        frame.setLocationRelativeTo(null); // center screen

        // Font and color theme
        Font font = new Font("Segoe UI", Font.PLAIN, 16);
        Color bgColor = new Color(245, 250, 255);
        Color btnColor = new Color(66, 135, 245);
        Color textColor = Color.WHITE;

        JPanel panel = new JPanel(new GridBagLayout());
        panel.setBackground(bgColor);
        panel.setBorder(new EmptyBorder(20, 20, 20, 20));
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(12, 12, 12, 12);
        gbc.fill = GridBagConstraints.HORIZONTAL;

        nameField = new JTextField();
        nameField.setFont(font);

        gradeField = new JTextField();
        gradeField.setFont(font);

        studentDropdown = new JComboBox<>();
        studentDropdown.setFont(font);

        addStudentBtn = new JButton("âž• Add Student");
        styleButton(addStudentBtn, btnColor, textColor, font);

        addGradeBtn = new JButton("ðŸ“¥ Add Grade");
        styleButton(addGradeBtn, btnColor, textColor, font);

        reportBtn = new JButton("ðŸ“‹ Show Report");
        styleButton(reportBtn, new Color(34, 180, 115), textColor, font);

        int y = 0;

        addLabel(panel, "Student Name:", font, gbc, 0, y);
        addComponent(panel, nameField, gbc, 1, y++);

        addComponent(panel, addStudentBtn, gbc, 1, y++);

        addLabel(panel, "Select Student:", font, gbc, 0, y);
        addComponent(panel, studentDropdown, gbc, 1, y++);

        addLabel(panel, "Enter Grade (0-100):", font, gbc, 0, y);
        addComponent(panel, gradeField, gbc, 1, y++);

        addComponent(panel, addGradeBtn, gbc, 1, y++);
        addComponent(panel, reportBtn, gbc, 1, y++);

        frame.setContentPane(panel);
        addListeners();
        frame.setVisible(true);
    }

    private void addListeners() {
        addStudentBtn.addActionListener(e -> {
            String name = nameField.getText().trim();
            if (name.isEmpty()) {
                JOptionPane.showMessageDialog(frame, "Name cannot be empty!");
                return;
            }
            Student s = new Student(name);
            students.add(s);
            studentDropdown.addItem(s);
            nameField.setText("");
            JOptionPane.showMessageDialog(frame, "âœ… Student '" + name + "' added.");
        });

        addGradeBtn.addActionListener(e -> {
            Student selected = (Student) studentDropdown.getSelectedItem();
            if (selected == null) {
                JOptionPane.showMessageDialog(frame, "Please select a student first.");
                return;
            }
            try {
                float grade = Float.parseFloat(gradeField.getText().trim());
                if (grade < 0 || grade > 100) {
                    JOptionPane.showMessageDialog(frame, "Grade must be between 0 and 100.");
                    return;
                }
                selected.addGrade(grade);
                gradeField.setText("");
                JOptionPane.showMessageDialog(frame, "âœ… Grade " + grade + " added to " + selected.name);
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(frame, "Please enter a valid number.");
            }
        });

        reportBtn.addActionListener(e -> showReport());
    }

    private void showReport() {
        if (students.isEmpty()) {
            JOptionPane.showMessageDialog(frame, "No students to show.");
            return;
        }

        StringBuilder report = new StringBuilder();
        report.append("ðŸ“Š Student Grade Summary\n\n");
        report.append(String.format("%-20s | %-20s | Avg   | High  | Low\n", "Name", "Grades"));
        report.append("-------------------------------------------------------------------\n");

        for (Student s : students) {
            String grades = s.grades.isEmpty() ? "None" : s.grades.toString();
            report.append(String.format("%-20s | %-20s | %.2f | %.2f | %.2f\n",
                    s.name, grades, s.average(), s.highest(), s.lowest()));
        }

        JTextArea textArea = new JTextArea(report.toString());
        textArea.setEditable(false);
        textArea.setFont(new Font("Monospaced", Font.PLAIN, 14));
        JScrollPane scrollPane = new JScrollPane(textArea);

        JFrame reportFrame = new JFrame("ðŸ“‹ Student Report");
        reportFrame.setSize(650, 400);
        reportFrame.setLocationRelativeTo(frame);
        reportFrame.add(scrollPane);
        reportFrame.setVisible(true);
    }

    private void styleButton(JButton button, Color bg, Color fg, Font font) {
        button.setFont(font);
        button.setFocusPainted(false);
        button.setBackground(bg);
        button.setForeground(fg);
        button.setBorder(new RoundedBorder(10));
    }

    private void addLabel(JPanel panel, String text, Font font, GridBagConstraints gbc, int x, int y) {
        JLabel label = new JLabel(text);
        label.setFont(font);
        gbc.gridx = x;
        gbc.gridy = y;
        panel.add(label, gbc);
    }

    private void addComponent(JPanel panel, JComponent comp, GridBagConstraints gbc, int x, int y) {
        gbc.gridx = x;
        gbc.gridy = y;
        panel.add(comp, gbc);
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(StudentGradeTrackerApp::new);
    }

    // Rounded button border
    static class RoundedBorder extends AbstractBorder {
        private final int radius;
        RoundedBorder(int radius) {
            this.radius = radius;
        }

        @Override
        public void paintBorder(Component c, Graphics g, int x, int y, int width, int height) {
            Graphics2D g2 = (Graphics2D) g;
            g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
            g2.setColor(Color.GRAY);
            g2.drawRoundRect(x, y, width - 1, height - 1, radius, radius);
        }

        @Override
        public Insets getBorderInsets(Component c) {
            return new Insets(5, 10, 5, 10);
        }

        @Override
        public Insets getBorderInsets(Component c, Insets insets) {
            insets.set(5, 10, 5, 10);
            return insets;
        }
    }
}
